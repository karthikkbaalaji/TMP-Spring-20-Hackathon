{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable import/no-mutable-exports */\n\n/* global XMLHttpRequest, window */\n// This function does an \"AJAX\" request to warn users on how to setup their icon path.\nimport warning from 'warning';\n\nvar urlExists = function urlExists() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasWarned = {};\n  var hasExecuted;\n\n  var warn = function warn(control, url, comment) {\n    return function (res) {\n      hasExecuted = true;\n\n      if (res.status === 404) {\n        var additionalComment = comment ? \" \".concat(comment) : '';\n        /* eslint-disable max-len */\n\n        warning(!url, \"The icon asset was not found at \".concat(url, \". Make sure the path to the icon asset is correct. You can set the icon path by importing the IconSettings component, `<IconSettings iconPath=[/assets/icons]>` from `components/iconSettings`, and wrap that component around your entire app or around individual components using icons. If you are using the `<Icon>` component, you can also pass the url to `this.props.path`.\").concat(additionalComment));\n        /* eslint-enable max-len */\n\n        hasWarned[\"\".concat(control, \"-path\")] = !!url;\n      }\n    };\n  };\n\n  var shouldWarn = function shouldWarn(control) {\n    return !hasExecuted && !hasWarned[\"\".concat(control, \"-path\")] && typeof window !== 'undefined' && process.env.NODE_ENV !== 'test';\n  };\n\n  if (typeof fetch === 'function') {\n    urlExists = function urlExists(control, url, comment) {\n      if (shouldWarn(control)) {\n        fetch(url).then(warn(control, url, comment));\n      }\n    };\n  } else {\n    // Using XMLHttpRequest can cause problems in non-browser environments. This should be completely removed in production environment and should not execute in a testing environment.\n    urlExists = function urlExists(control, url, comment) {\n      if (shouldWarn(control) && XMLHttpRequest) {\n        var http = new XMLHttpRequest();\n        http.open('GET', url, false);\n        http.send();\n        warn(control, url, comment)(http);\n      }\n    };\n  }\n}\n\nexport default urlExists;","map":null,"metadata":{},"sourceType":"module"}