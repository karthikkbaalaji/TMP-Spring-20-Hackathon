{"ast":null,"code":"import findTabbableElement from './tabbable';\nimport KEYS from './key-code';\nimport { canUseDOM } from './execution-environment';\nvar ancestor = null;\nvar focusLaterElement = null;\n\nvar handleScopedKeyDown = function handleScopedKeyDown(event) {\n  if (!canUseDOM || !ancestor || event.keyCode !== KEYS.TAB) {\n    return;\n  }\n\n  var tabbableElements = findTabbableElement(ancestor);\n  var finalTabbable = tabbableElements[event.shiftKey ? 0 : tabbableElements.length - 1];\n  var leavingFinalTabbable = finalTabbable === document.activeElement || // handle immediate shift+tab after opening with mouse\n  ancestor === document.activeElement;\n  if (!leavingFinalTabbable) return;\n  event.preventDefault();\n  var target = tabbableElements[event.shiftKey ? tabbableElements.length - 1 : 0];\n  target.focus();\n}; // PUBLIC methods\n\n\nvar ElementFocus = {\n  focusAncestor: function focusAncestor(_ref) {\n    var isPortal = _ref.isPortal;\n\n    if (canUseDOM) {\n      // When a portal is used (that is attaching a separate React mount, such as with Popover) programatic focusing within that portal may cause the window to scroll down to the DOM insertion point at the end of `body`. The following prevents the scrolling from occuring.\n      if (isPortal) {\n        var offset = window.pageYOffset;\n        ancestor.focus({\n          preventScroll: true\n        });\n        window.scrollTo(window.pageXOffset, offset);\n      } else {\n        ancestor.focus();\n      }\n    }\n  },\n  hasOrAncestorHasFocus: function hasOrAncestorHasFocus() {\n    return canUseDOM && (document.activeElement === ancestor || ancestor.contains(document.activeElement));\n  },\n  returnFocusToStoredElement: function returnFocusToStoredElement() {\n    if (canUseDOM) {\n      try {\n        focusLaterElement.focus();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn(\"You tried to return focus to \".concat(focusLaterElement, \" but it is not in the DOM anymore\"));\n      }\n\n      focusLaterElement = null;\n    }\n  },\n  setupScopedFocus: function setupScopedFocus(_ref2) {\n    var ancestorElement = _ref2.ancestorElement;\n    ancestor = ancestorElement;\n    window.addEventListener('keydown', handleScopedKeyDown, false);\n  },\n  storeActiveElement: function storeActiveElement() {\n    focusLaterElement = canUseDOM ? document.activeElement : null;\n  },\n  teardownScopedFocus: function teardownScopedFocus() {\n    ancestor = null;\n\n    if (canUseDOM) {\n      window.removeEventListener('keydown', handleScopedKeyDown);\n    }\n  }\n};\nexport default ElementFocus;","map":null,"metadata":{},"sourceType":"module"}